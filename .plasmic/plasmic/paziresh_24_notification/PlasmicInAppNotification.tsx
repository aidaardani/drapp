// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: baKTW3UAa7cxh71yA6NuMk
// Component: TvLiAjgrI0Pc

import * as React from "react";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Popover } from "@plasmicpkgs/radix-ui";
import { DataFetcher } from "@plasmicpkgs/plasmic-query";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_paziresh_24_design_system_css from "../paziresh_24_design_system/plasmic_paziresh_24_design_system.module.css"; // plasmic-import: h9Dbk9ygddw7UVEq1NNhKi/projectcss
import projectcss from "./plasmic_paziresh_24_notification.module.css"; // plasmic-import: baKTW3UAa7cxh71yA6NuMk/projectcss
import sty from "./PlasmicInAppNotification.module.css"; // plasmic-import: TvLiAjgrI0Pc/css

import BellIcon from "../paziresh_24_icons/icons/PlasmicIcon__Bell"; // plasmic-import: rDjUqSUK3eUM/icon
import ChevronLeftIcon from "../paziresh_24_icons/icons/PlasmicIcon__ChevronLeft"; // plasmic-import: r9Upp9NbiZkf/icon
import redDotIjbf5URccsnE from "../paziresh_24_icons/images/redDot.svg"; // plasmic-import: ijbf5URccsnE/picture

createPlasmicElementProxy;

export type PlasmicInAppNotification__VariantMembers = {};
export type PlasmicInAppNotification__VariantsArgs = {};
type VariantPropType = keyof PlasmicInAppNotification__VariantsArgs;
export const PlasmicInAppNotification__VariantProps =
  new Array<VariantPropType>();

export type PlasmicInAppNotification__ArgsType = {};
type ArgPropType = keyof PlasmicInAppNotification__ArgsType;
export const PlasmicInAppNotification__ArgProps = new Array<ArgPropType>();

export type PlasmicInAppNotification__OverridesType = {
  root?: Flex__<"div">;
  popoverCore?: Flex__<typeof Popover>;
  img?: Flex__<typeof PlasmicImg__>;
  httpRestApiFetcher?: Flex__<typeof DataFetcher>;
};

export interface DefaultInAppNotificationProps {
  className?: string;
}

const $$ = {};

function PlasmicInAppNotification__RenderFunc(props: {
  variants: PlasmicInAppNotification__VariantsArgs;
  args: PlasmicInAppNotification__ArgsType;
  overrides: PlasmicInAppNotification__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "popoverCore.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_paziresh_24_design_system_css.plasmic_tokens,
        sty.root
      )}
      dir={"rtl"}
    >
      <Popover
        data-plasmic-name={"popoverCore"}
        data-plasmic-override={overrides.popoverCore}
        className={classNames("__wab_instance", sty.popoverCore)}
        onOpenChange={generateStateOnChangeProp($state, [
          "popoverCore",
          "open"
        ])}
        open={generateStateValueProp($state, ["popoverCore", "open"])}
        overlay={
          <div className={classNames(projectcss.all, sty.freeBox__icLmk)}>
            <DataFetcher
              data-plasmic-name={"httpRestApiFetcher"}
              data-plasmic-override={overrides.httpRestApiFetcher}
              className={classNames("__wab_instance", sty.httpRestApiFetcher)}
              dataName={"workHoursData"}
              errorDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___3Fux4
                      )}
                    >
                      {
                        "\u062f\u0631 \u062f\u0631\u06cc\u0627\u0641\u062a \u067e\u06cc\u0627\u0645 \u0647\u0627 \u0628\u0647 \u062e\u0637\u0627 \u062e\u0648\u0631\u062f\u06cc\u0645."
                      }
                    </div>
                  )}
                </DataCtxReader__>
              }
              errorName={"fetchError"}
              headers={{
                "Content-Type": "application/json",
                Accept: "application/json"
              }}
              loadingDisplay={
                <DataCtxReader__>
                  {$ctx => (
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ue5Iu
                      )}
                    >
                      {
                        "\u062f\u0631 \u062d\u0627\u0644 \u062f\u0631\u06cc\u0627\u0641\u062a \u067e\u06cc\u0627\u0645 \u0647\u0627"
                      }
                    </div>
                  )}
                </DataCtxReader__>
              }
              method={"GET"}
              noLayout={true}
              previewErrorDisplay={false}
              previewSpinner={false}
              queryKey={``}
              url={
                "https://api.paziresh24.com/V1/doctor/center/workhours?center_id=5532"
              }
            >
              <DataCtxReader__>
                {$ctx =>
                  (() => {
                    try {
                      return $ctx.workHoursData.data.workhours.length === 0;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return true;
                      }
                      throw e;
                    }
                  })() ? (
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ijXq5)}
                      onClick={async event => {
                        const $steps = {};

                        $steps["goToSettingworkhours"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: "/setting/workhours"
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  location.assign(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToSettingworkhours"] != null &&
                          typeof $steps["goToSettingworkhours"] === "object" &&
                          typeof $steps["goToSettingworkhours"].then ===
                            "function"
                        ) {
                          $steps["goToSettingworkhours"] = await $steps[
                            "goToSettingworkhours"
                          ];
                        }
                      }}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tquP
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `!نوبت‌دهی اینترنتی ${
                                localStorage.getItem("center_id") == "5532"
                                  ? "ویزیت آنلاین"
                                  : "مطب"
                              } غیرفعال است`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062a\u0627\u06cc\u062a\u0644";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xn9Xe
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return `.پزشک گرامی، برای ${
                                localStorage.getItem("center_id") == "5532"
                                  ? "ویزیت آنلاین"
                                  : "مطب"
                              } شما ساعت کاری تنظیم نشده است`;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "\u062a\u0627\u06cc\u062a\u0644";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__bgTVi
                        )}
                      >
                        <ChevronLeftIcon
                          className={classNames(projectcss.all, sty.svg__tmFn2)}
                          role={"img"}
                        />

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__vWkb3
                          )}
                        >
                          {
                            "\u062a\u0646\u0638\u06cc\u0645 \u0633\u0627\u0639\u062a \u06a9\u0627\u0631\u06cc"
                          }
                        </div>
                      </div>
                    </Stack__>
                  ) : null
                }
              </DataCtxReader__>
            </DataFetcher>
          </div>
        }
        themeResetClass={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_paziresh_24_design_system_css.plasmic_tokens
        )}
      >
        <div className={classNames(projectcss.all, sty.freeBox__tmPtM)}>
          <BellIcon
            className={classNames(projectcss.all, sty.svg___2JFi)}
            role={"img"}
          />

          {(() => {
            try {
              return true;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"10px"}
              loading={"lazy"}
              src={{
                src: redDotIjbf5URccsnE,
                fullWidth: 169,
                fullHeight: 150,
                aspectRatio: 1.125
              }}
            />
          ) : null}
        </div>
      </Popover>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "popoverCore", "img", "httpRestApiFetcher"],
  popoverCore: ["popoverCore", "img", "httpRestApiFetcher"],
  img: ["img"],
  httpRestApiFetcher: ["httpRestApiFetcher"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  popoverCore: typeof Popover;
  img: typeof PlasmicImg__;
  httpRestApiFetcher: typeof DataFetcher;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInAppNotification__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInAppNotification__VariantsArgs;
    args?: PlasmicInAppNotification__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInAppNotification__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicInAppNotification__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicInAppNotification__ArgProps,
          internalVariantPropNames: PlasmicInAppNotification__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicInAppNotification__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInAppNotification";
  } else {
    func.displayName = `PlasmicInAppNotification.${nodeName}`;
  }
  return func;
}

export const PlasmicInAppNotification = Object.assign(
  // Top-level PlasmicInAppNotification renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    popoverCore: makeNodeComponent("popoverCore"),
    img: makeNodeComponent("img"),
    httpRestApiFetcher: makeNodeComponent("httpRestApiFetcher"),

    // Metadata about props expected for PlasmicInAppNotification
    internalVariantProps: PlasmicInAppNotification__VariantProps,
    internalArgProps: PlasmicInAppNotification__ArgProps
  }
);

export default PlasmicInAppNotification;
/* prettier-ignore-end */
